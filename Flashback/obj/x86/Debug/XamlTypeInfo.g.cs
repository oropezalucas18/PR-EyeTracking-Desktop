//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Flashback
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        private global::Flashback.Flashback_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Flashback.Flashback_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::Flashback.Flashback_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace Flashback.Flashback_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Flashback.Flashback_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::Flashback.Flashback_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::Flashback.Flashback_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Flashback.Flashback_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Flashback.Flashback_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[43];
            _typeNameTable[0] = "Windows.UI.Color";
            _typeNameTable[1] = "System.ValueType";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Byte";
            _typeNameTable[4] = "Helpers.Controls.HamburgerMenu";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[6] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[7] = "Boolean";
            _typeNameTable[8] = "Helpers.Navigation.NavigationLink[]";
            _typeNameTable[9] = "System.Array";
            _typeNameTable[10] = "Helpers.Navigation.NavigationLink";
            _typeNameTable[11] = "String";
            _typeNameTable[12] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[13] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[14] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[15] = "Flashback.Pages.HelpPage";
            _typeNameTable[16] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[17] = "Helpers.Controls.ProgressOverlay";
            _typeNameTable[18] = "Helpers.Controls.ProgressObject";
            _typeNameTable[19] = "Helpers.ViewModel.ViewModelBase";
            _typeNameTable[20] = "Double";
            _typeNameTable[21] = "Flashback.Pages.ProjectPage";
            _typeNameTable[22] = "Helpers.Converters.BooleanToVisibilityConverter";
            _typeNameTable[23] = "Flashback.Pages.StartPage";
            _typeNameTable[24] = "Flashback.Views.FeedbackContentDialog";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.ContentDialog";
            _typeNameTable[26] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[27] = "Flashback.Models.ClipsDetailDataTemplateSelector";
            _typeNameTable[28] = "Windows.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[29] = "Flashback.Views.ClipsView";
            _typeNameTable[30] = "Flashback.Views.PreviewView";
            _typeNameTable[31] = "Helpers.Controls.Caption";
            _typeNameTable[32] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[33] = "Flashback.Views.SaveView";
            _typeNameTable[34] = "Helpers.Converters.SecondsToTimeSpanStringConverter";
            _typeNameTable[35] = "Flashback.Views.SlideshowClipView";
            _typeNameTable[36] = "Flashback.Models.SlideshowClip";
            _typeNameTable[37] = "Flashback.Models.Clip";
            _typeNameTable[38] = "Flashback.Views.TitlesView";
            _typeNameTable[39] = "Helpers.Controls.RangeSlider";
            _typeNameTable[40] = "Windows.UI.Xaml.Data.IValueConverter";
            _typeNameTable[41] = "Flashback.Views.VideoClipView";
            _typeNameTable[42] = "Flashback.Models.VideoClip";

            _typeTable = new global::System.Type[43];
            _typeTable[0] = typeof(global::Windows.UI.Color);
            _typeTable[1] = typeof(global::System.ValueType);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Byte);
            _typeTable[4] = typeof(global::Helpers.Controls.HamburgerMenu);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[7] = typeof(global::System.Boolean);
            _typeTable[8] = typeof(global::Helpers.Navigation.NavigationLink[]);
            _typeTable[9] = typeof(global::System.Array);
            _typeTable[10] = typeof(global::Helpers.Navigation.NavigationLink);
            _typeTable[11] = typeof(global::System.String);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[15] = typeof(global::Flashback.Pages.HelpPage);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[17] = typeof(global::Helpers.Controls.ProgressOverlay);
            _typeTable[18] = typeof(global::Helpers.Controls.ProgressObject);
            _typeTable[19] = typeof(global::Helpers.ViewModel.ViewModelBase);
            _typeTable[20] = typeof(global::System.Double);
            _typeTable[21] = typeof(global::Flashback.Pages.ProjectPage);
            _typeTable[22] = typeof(global::Helpers.Converters.BooleanToVisibilityConverter);
            _typeTable[23] = typeof(global::Flashback.Pages.StartPage);
            _typeTable[24] = typeof(global::Flashback.Views.FeedbackContentDialog);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.ContentDialog);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[27] = typeof(global::Flashback.Models.ClipsDetailDataTemplateSelector);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[29] = typeof(global::Flashback.Views.ClipsView);
            _typeTable[30] = typeof(global::Flashback.Views.PreviewView);
            _typeTable[31] = typeof(global::Helpers.Controls.Caption);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[33] = typeof(global::Flashback.Views.SaveView);
            _typeTable[34] = typeof(global::Helpers.Converters.SecondsToTimeSpanStringConverter);
            _typeTable[35] = typeof(global::Flashback.Views.SlideshowClipView);
            _typeTable[36] = typeof(global::Flashback.Models.SlideshowClip);
            _typeTable[37] = typeof(global::Flashback.Models.Clip);
            _typeTable[38] = typeof(global::Flashback.Views.TitlesView);
            _typeTable[39] = typeof(global::Helpers.Controls.RangeSlider);
            _typeTable[40] = typeof(global::Windows.UI.Xaml.Data.IValueConverter);
            _typeTable[41] = typeof(global::Flashback.Views.VideoClipView);
            _typeTable[42] = typeof(global::Flashback.Models.VideoClip);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_4_HamburgerMenu() { return new global::Helpers.Controls.HamburgerMenu(); }
        private object Activate_10_NavigationLink() { return new global::Helpers.Navigation.NavigationLink(); }
        private object Activate_15_HelpPage() { return new global::Flashback.Pages.HelpPage(); }
        private object Activate_17_ProgressOverlay() { return new global::Helpers.Controls.ProgressOverlay(); }
        private object Activate_18_ProgressObject() { return new global::Helpers.Controls.ProgressObject(); }
        private object Activate_21_ProjectPage() { return new global::Flashback.Pages.ProjectPage(); }
        private object Activate_22_BooleanToVisibilityConverter() { return new global::Helpers.Converters.BooleanToVisibilityConverter(); }
        private object Activate_23_StartPage() { return new global::Flashback.Pages.StartPage(); }
        private object Activate_24_FeedbackContentDialog() { return new global::Flashback.Views.FeedbackContentDialog(); }
        private object Activate_27_ClipsDetailDataTemplateSelector() { return new global::Flashback.Models.ClipsDetailDataTemplateSelector(); }
        private object Activate_29_ClipsView() { return new global::Flashback.Views.ClipsView(); }
        private object Activate_30_PreviewView() { return new global::Flashback.Views.PreviewView(); }
        private object Activate_31_Caption() { return new global::Helpers.Controls.Caption(); }
        private object Activate_33_SaveView() { return new global::Flashback.Views.SaveView(); }
        private object Activate_34_SecondsToTimeSpanStringConverter() { return new global::Helpers.Converters.SecondsToTimeSpanStringConverter(); }
        private object Activate_35_SlideshowClipView() { return new global::Flashback.Views.SlideshowClipView(); }
        private object Activate_36_SlideshowClip() { return new global::Flashback.Models.SlideshowClip(); }
        private object Activate_38_TitlesView() { return new global::Flashback.Views.TitlesView(); }
        private object Activate_39_RangeSlider() { return new global::Helpers.Controls.RangeSlider(); }
        private object Activate_41_VideoClipView() { return new global::Flashback.Views.VideoClipView(); }
        private object Activate_42_VideoClip() { return new global::Flashback.Models.VideoClip(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Flashback.Flashback_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Windows.UI.Color
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 1:   //  System.ValueType
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 2:   //  Object
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Byte
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  Helpers.Controls.HamburgerMenu
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_4_HamburgerMenu;
                userType.AddMemberName("HeaderBackground");
                userType.AddMemberName("HeaderForeground");
                userType.AddMemberName("PaneBackground");
                userType.AddMemberName("IsPaneOpen");
                userType.AddMemberName("NavigationLinks");
                userType.AddMemberName("PaneForeground");
                userType.AddMemberName("PaneBottomContent");
                userType.AddMemberName("HeaderRightContent");
                xamlType = userType;
                break;

            case 5:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Boolean
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Helpers.Navigation.NavigationLink[]
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  System.Array
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 10:   //  Helpers.Navigation.NavigationLink
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_NavigationLink;
                userType.AddMemberName("Label");
                userType.AddMemberName("Symbol");
                userType.AddMemberName("Control");
                xamlType = userType;
                break;

            case 11:   //  String
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Flashback.Pages.HelpPage
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_15_HelpPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Helpers.Controls.ProgressOverlay
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_17_ProgressOverlay;
                userType.AddMemberName("ProgressObject");
                userType.AddMemberName("BackgroundOpacity");
                xamlType = userType;
                break;

            case 18:   //  Helpers.Controls.ProgressObject
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Helpers.ViewModel.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  Helpers.ViewModel.ViewModelBase
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 20:   //  Double
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Flashback.Pages.ProjectPage
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_ProjectPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Helpers.Converters.BooleanToVisibilityConverter
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_BooleanToVisibilityConverter;
                xamlType = userType;
                break;

            case 23:   //  Flashback.Pages.StartPage
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_StartPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Flashback.Views.FeedbackContentDialog
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.Activator = Activate_24_FeedbackContentDialog;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Controls.ContentDialog
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  Flashback.Models.ClipsDetailDataTemplateSelector
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.DataTemplateSelector"));
                userType.Activator = Activate_27_ClipsDetailDataTemplateSelector;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  Windows.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Flashback.Views.ClipsView
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_29_ClipsView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Flashback.Views.PreviewView
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_30_PreviewView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Helpers.Controls.Caption
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_31_Caption;
                userType.AddMemberName("CaptionText");
                userType.AddMemberName("CaptionMargin");
                userType.AddMemberName("CaptionForeground");
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Flashback.Views.SaveView
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_33_SaveView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  Helpers.Converters.SecondsToTimeSpanStringConverter
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_34_SecondsToTimeSpanStringConverter;
                xamlType = userType;
                break;

            case 35:   //  Flashback.Views.SlideshowClipView
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_35_SlideshowClipView;
                userType.AddMemberName("SlideshowClip");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Flashback.Models.SlideshowClip
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Flashback.Models.Clip"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  Flashback.Models.Clip
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Helpers.ViewModel.ViewModelBase"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Flashback.Views.TitlesView
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_38_TitlesView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Helpers.Controls.RangeSlider
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_39_RangeSlider;
                userType.AddMemberName("Start");
                userType.AddMemberName("End");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("MinimumRange");
                userType.AddMemberName("StepFrequency");
                userType.AddMemberName("ThumbTooltipValueConverter");
                userType.AddMemberName("IsStartSliderEnabled");
                userType.AddMemberName("IsEndSliderEnabled");
                userType.AddMemberName("TickFrequency");
                xamlType = userType;
                break;

            case 40:   //  Windows.UI.Xaml.Data.IValueConverter
                xamlType = new global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 41:   //  Flashback.Views.VideoClipView
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_41_VideoClipView;
                userType.AddMemberName("VideoClip");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  Flashback.Models.VideoClip
                userType = new global::Flashback.Flashback_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Flashback.Models.Clip"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Helpers.Helpers_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_0_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_1_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_1_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_2_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_2_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_3_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_3_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_4_HamburgerMenu_HeaderBackground(object instance)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            return that.HeaderBackground;
        }
        private void set_4_HamburgerMenu_HeaderBackground(object instance, object Value)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            that.HeaderBackground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_5_HamburgerMenu_HeaderForeground(object instance)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            return that.HeaderForeground;
        }
        private void set_5_HamburgerMenu_HeaderForeground(object instance, object Value)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            that.HeaderForeground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_6_HamburgerMenu_PaneBackground(object instance)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            return that.PaneBackground;
        }
        private void set_6_HamburgerMenu_PaneBackground(object instance, object Value)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            that.PaneBackground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_7_HamburgerMenu_IsPaneOpen(object instance)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            return that.IsPaneOpen;
        }
        private void set_7_HamburgerMenu_IsPaneOpen(object instance, object Value)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            that.IsPaneOpen = (global::System.Boolean)Value;
        }
        private object get_8_HamburgerMenu_NavigationLinks(object instance)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            return that.NavigationLinks;
        }
        private void set_8_HamburgerMenu_NavigationLinks(object instance, object Value)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            that.NavigationLinks = (global::Helpers.Navigation.NavigationLink[])Value;
        }
        private object get_9_NavigationLink_Label(object instance)
        {
            var that = (global::Helpers.Navigation.NavigationLink)instance;
            return that.Label;
        }
        private void set_9_NavigationLink_Label(object instance, object Value)
        {
            var that = (global::Helpers.Navigation.NavigationLink)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_10_NavigationLink_Symbol(object instance)
        {
            var that = (global::Helpers.Navigation.NavigationLink)instance;
            return that.Symbol;
        }
        private void set_10_NavigationLink_Symbol(object instance, object Value)
        {
            var that = (global::Helpers.Navigation.NavigationLink)instance;
            that.Symbol = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_11_NavigationLink_Control(object instance)
        {
            var that = (global::Helpers.Navigation.NavigationLink)instance;
            return that.Control;
        }
        private void set_11_NavigationLink_Control(object instance, object Value)
        {
            var that = (global::Helpers.Navigation.NavigationLink)instance;
            that.Control = (global::Windows.UI.Xaml.Controls.Control)Value;
        }
        private object get_12_HamburgerMenu_PaneForeground(object instance)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            return that.PaneForeground;
        }
        private void set_12_HamburgerMenu_PaneForeground(object instance, object Value)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            that.PaneForeground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_13_HamburgerMenu_PaneBottomContent(object instance)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            return that.PaneBottomContent;
        }
        private void set_13_HamburgerMenu_PaneBottomContent(object instance, object Value)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            that.PaneBottomContent = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_14_HamburgerMenu_HeaderRightContent(object instance)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            return that.HeaderRightContent;
        }
        private void set_14_HamburgerMenu_HeaderRightContent(object instance, object Value)
        {
            var that = (global::Helpers.Controls.HamburgerMenu)instance;
            that.HeaderRightContent = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_15_ProgressOverlay_ProgressObject(object instance)
        {
            var that = (global::Helpers.Controls.ProgressOverlay)instance;
            return that.ProgressObject;
        }
        private void set_15_ProgressOverlay_ProgressObject(object instance, object Value)
        {
            var that = (global::Helpers.Controls.ProgressOverlay)instance;
            that.ProgressObject = (global::Helpers.Controls.ProgressObject)Value;
        }
        private object get_16_ProgressOverlay_BackgroundOpacity(object instance)
        {
            var that = (global::Helpers.Controls.ProgressOverlay)instance;
            return that.BackgroundOpacity;
        }
        private void set_16_ProgressOverlay_BackgroundOpacity(object instance, object Value)
        {
            var that = (global::Helpers.Controls.ProgressOverlay)instance;
            that.BackgroundOpacity = (global::System.Double)Value;
        }
        private object get_17_Caption_CaptionText(object instance)
        {
            var that = (global::Helpers.Controls.Caption)instance;
            return that.CaptionText;
        }
        private void set_17_Caption_CaptionText(object instance, object Value)
        {
            var that = (global::Helpers.Controls.Caption)instance;
            that.CaptionText = (global::System.String)Value;
        }
        private object get_18_Caption_CaptionMargin(object instance)
        {
            var that = (global::Helpers.Controls.Caption)instance;
            return that.CaptionMargin;
        }
        private void set_18_Caption_CaptionMargin(object instance, object Value)
        {
            var that = (global::Helpers.Controls.Caption)instance;
            that.CaptionMargin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_19_Caption_CaptionForeground(object instance)
        {
            var that = (global::Helpers.Controls.Caption)instance;
            return that.CaptionForeground;
        }
        private void set_19_Caption_CaptionForeground(object instance, object Value)
        {
            var that = (global::Helpers.Controls.Caption)instance;
            that.CaptionForeground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_20_SlideshowClipView_SlideshowClip(object instance)
        {
            var that = (global::Flashback.Views.SlideshowClipView)instance;
            return that.SlideshowClip;
        }
        private void set_20_SlideshowClipView_SlideshowClip(object instance, object Value)
        {
            var that = (global::Flashback.Views.SlideshowClipView)instance;
            that.SlideshowClip = (global::Flashback.Models.SlideshowClip)Value;
        }
        private object get_21_RangeSlider_Start(object instance)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            return that.Start;
        }
        private void set_21_RangeSlider_Start(object instance, object Value)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            that.Start = (global::System.Double)Value;
        }
        private object get_22_RangeSlider_End(object instance)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            return that.End;
        }
        private void set_22_RangeSlider_End(object instance, object Value)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            that.End = (global::System.Double)Value;
        }
        private object get_23_RangeSlider_Minimum(object instance)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            return that.Minimum;
        }
        private void set_23_RangeSlider_Minimum(object instance, object Value)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_24_RangeSlider_Maximum(object instance)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            return that.Maximum;
        }
        private void set_24_RangeSlider_Maximum(object instance, object Value)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_25_RangeSlider_MinimumRange(object instance)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            return that.MinimumRange;
        }
        private void set_25_RangeSlider_MinimumRange(object instance, object Value)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            that.MinimumRange = (global::System.Double)Value;
        }
        private object get_26_RangeSlider_StepFrequency(object instance)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            return that.StepFrequency;
        }
        private void set_26_RangeSlider_StepFrequency(object instance, object Value)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            that.StepFrequency = (global::System.Double)Value;
        }
        private object get_27_RangeSlider_ThumbTooltipValueConverter(object instance)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            return that.ThumbTooltipValueConverter;
        }
        private void set_27_RangeSlider_ThumbTooltipValueConverter(object instance, object Value)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            that.ThumbTooltipValueConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_28_RangeSlider_IsStartSliderEnabled(object instance)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            return that.IsStartSliderEnabled;
        }
        private void set_28_RangeSlider_IsStartSliderEnabled(object instance, object Value)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            that.IsStartSliderEnabled = (global::System.Boolean)Value;
        }
        private object get_29_RangeSlider_IsEndSliderEnabled(object instance)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            return that.IsEndSliderEnabled;
        }
        private void set_29_RangeSlider_IsEndSliderEnabled(object instance, object Value)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            that.IsEndSliderEnabled = (global::System.Boolean)Value;
        }
        private object get_30_RangeSlider_TickFrequency(object instance)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            return that.TickFrequency;
        }
        private void set_30_RangeSlider_TickFrequency(object instance, object Value)
        {
            var that = (global::Helpers.Controls.RangeSlider)instance;
            that.TickFrequency = (global::System.Double)Value;
        }
        private object get_31_VideoClipView_VideoClip(object instance)
        {
            var that = (global::Flashback.Views.VideoClipView)instance;
            return that.VideoClip;
        }
        private void set_31_VideoClipView_VideoClip(object instance, object Value)
        {
            var that = (global::Flashback.Views.VideoClipView)instance;
            that.VideoClip = (global::Flashback.Models.VideoClip)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Flashback.Flashback_XamlTypeInfo.XamlMember xamlMember = null;
            global::Flashback.Flashback_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Windows.UI.Color.A":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_0_Color_A;
                xamlMember.Setter = set_0_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_1_Color_B;
                xamlMember.Setter = set_1_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_2_Color_G;
                xamlMember.Setter = set_2_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_3_Color_R;
                xamlMember.Setter = set_3_Color_R;
                break;
            case "Helpers.Controls.HamburgerMenu.HeaderBackground":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.HamburgerMenu");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "HeaderBackground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_HamburgerMenu_HeaderBackground;
                xamlMember.Setter = set_4_HamburgerMenu_HeaderBackground;
                break;
            case "Helpers.Controls.HamburgerMenu.HeaderForeground":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.HamburgerMenu");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "HeaderForeground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_HamburgerMenu_HeaderForeground;
                xamlMember.Setter = set_5_HamburgerMenu_HeaderForeground;
                break;
            case "Helpers.Controls.HamburgerMenu.PaneBackground":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.HamburgerMenu");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "PaneBackground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_HamburgerMenu_PaneBackground;
                xamlMember.Setter = set_6_HamburgerMenu_PaneBackground;
                break;
            case "Helpers.Controls.HamburgerMenu.IsPaneOpen":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.HamburgerMenu");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "IsPaneOpen", "Boolean");
                xamlMember.Getter = get_7_HamburgerMenu_IsPaneOpen;
                xamlMember.Setter = set_7_HamburgerMenu_IsPaneOpen;
                break;
            case "Helpers.Controls.HamburgerMenu.NavigationLinks":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.HamburgerMenu");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "NavigationLinks", "Helpers.Navigation.NavigationLink[]");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_HamburgerMenu_NavigationLinks;
                xamlMember.Setter = set_8_HamburgerMenu_NavigationLinks;
                break;
            case "Helpers.Navigation.NavigationLink.Label":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Navigation.NavigationLink");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.Getter = get_9_NavigationLink_Label;
                xamlMember.Setter = set_9_NavigationLink_Label;
                break;
            case "Helpers.Navigation.NavigationLink.Symbol":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Navigation.NavigationLink");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "Symbol", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.Getter = get_10_NavigationLink_Symbol;
                xamlMember.Setter = set_10_NavigationLink_Symbol;
                break;
            case "Helpers.Navigation.NavigationLink.Control":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Navigation.NavigationLink");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "Control", "Windows.UI.Xaml.Controls.Control");
                xamlMember.Getter = get_11_NavigationLink_Control;
                xamlMember.Setter = set_11_NavigationLink_Control;
                break;
            case "Helpers.Controls.HamburgerMenu.PaneForeground":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.HamburgerMenu");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "PaneForeground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_HamburgerMenu_PaneForeground;
                xamlMember.Setter = set_12_HamburgerMenu_PaneForeground;
                break;
            case "Helpers.Controls.HamburgerMenu.PaneBottomContent":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.HamburgerMenu");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "PaneBottomContent", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_HamburgerMenu_PaneBottomContent;
                xamlMember.Setter = set_13_HamburgerMenu_PaneBottomContent;
                break;
            case "Helpers.Controls.HamburgerMenu.HeaderRightContent":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.HamburgerMenu");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "HeaderRightContent", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_HamburgerMenu_HeaderRightContent;
                xamlMember.Setter = set_14_HamburgerMenu_HeaderRightContent;
                break;
            case "Helpers.Controls.ProgressOverlay.ProgressObject":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.ProgressOverlay");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "ProgressObject", "Helpers.Controls.ProgressObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_ProgressOverlay_ProgressObject;
                xamlMember.Setter = set_15_ProgressOverlay_ProgressObject;
                break;
            case "Helpers.Controls.ProgressOverlay.BackgroundOpacity":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.ProgressOverlay");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "BackgroundOpacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_ProgressOverlay_BackgroundOpacity;
                xamlMember.Setter = set_16_ProgressOverlay_BackgroundOpacity;
                break;
            case "Helpers.Controls.Caption.CaptionText":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.Caption");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "CaptionText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_Caption_CaptionText;
                xamlMember.Setter = set_17_Caption_CaptionText;
                break;
            case "Helpers.Controls.Caption.CaptionMargin":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.Caption");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "CaptionMargin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_Caption_CaptionMargin;
                xamlMember.Setter = set_18_Caption_CaptionMargin;
                break;
            case "Helpers.Controls.Caption.CaptionForeground":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.Caption");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "CaptionForeground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_Caption_CaptionForeground;
                xamlMember.Setter = set_19_Caption_CaptionForeground;
                break;
            case "Flashback.Views.SlideshowClipView.SlideshowClip":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Flashback.Views.SlideshowClipView");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "SlideshowClip", "Flashback.Models.SlideshowClip");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_SlideshowClipView_SlideshowClip;
                xamlMember.Setter = set_20_SlideshowClipView_SlideshowClip;
                break;
            case "Helpers.Controls.RangeSlider.Start":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.RangeSlider");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "Start", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_RangeSlider_Start;
                xamlMember.Setter = set_21_RangeSlider_Start;
                break;
            case "Helpers.Controls.RangeSlider.End":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.RangeSlider");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "End", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_RangeSlider_End;
                xamlMember.Setter = set_22_RangeSlider_End;
                break;
            case "Helpers.Controls.RangeSlider.Minimum":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.RangeSlider");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_RangeSlider_Minimum;
                xamlMember.Setter = set_23_RangeSlider_Minimum;
                break;
            case "Helpers.Controls.RangeSlider.Maximum":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.RangeSlider");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_RangeSlider_Maximum;
                xamlMember.Setter = set_24_RangeSlider_Maximum;
                break;
            case "Helpers.Controls.RangeSlider.MinimumRange":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.RangeSlider");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "MinimumRange", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_RangeSlider_MinimumRange;
                xamlMember.Setter = set_25_RangeSlider_MinimumRange;
                break;
            case "Helpers.Controls.RangeSlider.StepFrequency":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.RangeSlider");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "StepFrequency", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_RangeSlider_StepFrequency;
                xamlMember.Setter = set_26_RangeSlider_StepFrequency;
                break;
            case "Helpers.Controls.RangeSlider.ThumbTooltipValueConverter":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.RangeSlider");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "ThumbTooltipValueConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_RangeSlider_ThumbTooltipValueConverter;
                xamlMember.Setter = set_27_RangeSlider_ThumbTooltipValueConverter;
                break;
            case "Helpers.Controls.RangeSlider.IsStartSliderEnabled":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.RangeSlider");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "IsStartSliderEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_RangeSlider_IsStartSliderEnabled;
                xamlMember.Setter = set_28_RangeSlider_IsStartSliderEnabled;
                break;
            case "Helpers.Controls.RangeSlider.IsEndSliderEnabled":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.RangeSlider");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "IsEndSliderEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_RangeSlider_IsEndSliderEnabled;
                xamlMember.Setter = set_29_RangeSlider_IsEndSliderEnabled;
                break;
            case "Helpers.Controls.RangeSlider.TickFrequency":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Helpers.Controls.RangeSlider");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "TickFrequency", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_RangeSlider_TickFrequency;
                xamlMember.Setter = set_30_RangeSlider_TickFrequency;
                break;
            case "Flashback.Views.VideoClipView.VideoClip":
                userType = (global::Flashback.Flashback_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Flashback.Views.VideoClipView");
                xamlMember = new global::Flashback.Flashback_XamlTypeInfo.XamlMember(this, "VideoClip", "Flashback.Models.VideoClip");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_VideoClipView_VideoClip;
                xamlMember.Setter = set_31_VideoClipView_VideoClip;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Flashback.Flashback_XamlTypeInfo.XamlSystemBaseType
        , global::Windows.UI.Xaml.Markup.IXamlType2
    {
        global::Flashback.Flashback_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;
        global::Windows.UI.Xaml.Markup.IXamlType _boxedType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Flashback.Flashback_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        public global::Windows.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Windows.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Flashback.Flashback_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Flashback.Flashback_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

